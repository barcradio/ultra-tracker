/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RosterRouteImport } from './routes/roster'

const StationsLazyRouteImport = createFileRoute('/stations')()
const SettingsLazyRouteImport = createFileRoute('/settings')()
const LogsLazyRouteImport = createFileRoute('/logs')()
const HelpLazyRouteImport = createFileRoute('/help')()
const ExportLazyRouteImport = createFileRoute('/export')()
const IndexLazyRouteImport = createFileRoute('/')()

const StationsLazyRoute = StationsLazyRouteImport.update({
  id: '/stations',
  path: '/stations',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/stations.lazy').then((d) => d.Route))
const SettingsLazyRoute = SettingsLazyRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))
const LogsLazyRoute = LogsLazyRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/logs.lazy').then((d) => d.Route))
const HelpLazyRoute = HelpLazyRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/help.lazy').then((d) => d.Route))
const ExportLazyRoute = ExportLazyRouteImport.update({
  id: '/export',
  path: '/export',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/export.lazy').then((d) => d.Route))
const RosterRoute = RosterRouteImport.update({
  id: '/roster',
  path: '/roster',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/roster': typeof RosterRoute
  '/export': typeof ExportLazyRoute
  '/help': typeof HelpLazyRoute
  '/logs': typeof LogsLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/stations': typeof StationsLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/roster': typeof RosterRoute
  '/export': typeof ExportLazyRoute
  '/help': typeof HelpLazyRoute
  '/logs': typeof LogsLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/stations': typeof StationsLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/roster': typeof RosterRoute
  '/export': typeof ExportLazyRoute
  '/help': typeof HelpLazyRoute
  '/logs': typeof LogsLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/stations': typeof StationsLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/roster'
    | '/export'
    | '/help'
    | '/logs'
    | '/settings'
    | '/stations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/roster'
    | '/export'
    | '/help'
    | '/logs'
    | '/settings'
    | '/stations'
  id:
    | '__root__'
    | '/'
    | '/roster'
    | '/export'
    | '/help'
    | '/logs'
    | '/settings'
    | '/stations'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RosterRoute: typeof RosterRoute
  ExportLazyRoute: typeof ExportLazyRoute
  HelpLazyRoute: typeof HelpLazyRoute
  LogsLazyRoute: typeof LogsLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  StationsLazyRoute: typeof StationsLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stations': {
      id: '/stations'
      path: '/stations'
      fullPath: '/stations'
      preLoaderRoute: typeof StationsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/export': {
      id: '/export'
      path: '/export'
      fullPath: '/export'
      preLoaderRoute: typeof ExportLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/roster': {
      id: '/roster'
      path: '/roster'
      fullPath: '/roster'
      preLoaderRoute: typeof RosterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RosterRoute: RosterRoute,
  ExportLazyRoute: ExportLazyRoute,
  HelpLazyRoute: HelpLazyRoute,
  LogsLazyRoute: LogsLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  StationsLazyRoute: StationsLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
